generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    avatarUrl String?
    username  String
    email     String   @unique
    createdAt DateTime @default(now())

    Session                Session[]
    submissionsAsStudent   Submission[] @relation("StudentSubmissions")
    submissionsAsProfessor Submission[] @relation("ProfessorSubmissions")
    Submission             Submission[]
}

model Submission {
    id          String   @id @default(cuid())
    studentId   String
    professorId String
    title       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    student   User      @relation("StudentSubmissions", fields: [studentId], references: [id])
    professor User      @relation("ProfessorSubmissions", fields: [professorId], references: [id])
    versions  Version[]
    User      User?     @relation(fields: [userId], references: [id])
    userId    String?
}

model Version {
    id               String   @id @default(cuid())
    submissionId     String
    versionNumber    Int
    filePath         String
    studentMessage   String? // description from student
    professorMessage String? // feedback from professor
    status           Status   @default(PENDING)
    createdAt        DateTime @default(now())

    submission Submission @relation(fields: [submissionId], references: [id])
}

enum Status {
    PENDING
    CHANGES_REQUESTED
    APPROVED
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
    id            String     @id @default(cuid())
    title         String
    author        String
    description   String?
    imageUrl      String?
    categories    Category[] // many-to-many
    publishedDate DateTime?
    language      String?
    isbn          String?    @unique
    pageCount     Int?
    publisher     String?
    rating        Float?
    createdAt     DateTime   @default(now())
}

model Category {
    id    String @id @default(cuid())
    name  String @unique
    books Book[]
}
